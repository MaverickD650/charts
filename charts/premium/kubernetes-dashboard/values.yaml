image:
  repository: kubernetesui/dashboard-web
  pullPolicy: IfNotPresent
  tag: 1.4.0@sha256:4445b31a2c25c875e2df8ca103a8e3f3275778d10065c7c011f6ca42cd4bec5f
authImage:
  repository: kubernetesui/dashboard-auth
  pullPolicy: IfNotPresent
  tag: 1.1.3@sha256:cc1b552c6d9609506ba171dc4b6a2474fdcac774f7a89992ecdf833ddfa75203
apiImage:
  repository: kubernetesui/dashboard-api
  pullPolicy: IfNotPresent
  tag: 1.7.0@sha256:60595892c2cf21b7fbd09324120e339e0e44874cd96267bc4712cb86694835f1
metricsImage:
  repository: kubernetesui/dashboard-metrics-scraper
  pullPolicy: IfNotPresent
  tag: 1.1.0@sha256:dab2e495d0175a7ab051268806e4ab31bab402f36b719a3ff54e841b6eccee43
service:
  main:
    targetSelector: main
    ports:
      main:
        targetSelector: main
        protocol: tcp
        targetPort: 8000
        port: 8000
  auth:
    targetSelector: auth
    ports:
      main:
        targetSelector: auth
        protocol: tcp
        targetPort: 8000
        port: 8000
  api:
    targetSelector: api
    ports:
      main:
        targetSelector: api
        protocol: tcp
        targetPort: 8000
        port: 8000
  metrics:
    targetSelector: metrics
    ports:
      main:
        targetSelector: metrics
        protocol: TCP
        targetPort: 8000
        port: 8000
workload:
  main:
    podSpec:
      containers:
        main:
          imageSelector: image
          enabled: true
          primary: true
  auth:
    podSpec:
      containers:
        auth:
          imageSelector: authImage
          automountServiceAccountToken: true
  api:
    podSpec:
      containers:
        api:
          imageSelector: apiImage
          automountServiceAccountToken: true
  metrics:
    podSpec:
      containers:
        metrics:
          imageSelector: metricsImage
          automountServiceAccountToken: true
          probes:
            liveness:
              enabled: true
              type: http
              command: /
            readiness:
              enabled: true
              type: http
              command: /
            startup:
              enabled: true
              type: http
              command: /       

# General configuration shared across resources
app:
  # Mode determines if chart should deploy a full Dashboard with all containers or just the API.
  # - dashboard - deploys all the containers
  # - api - deploys just the API
  mode: 'dashboard'
  security:
    # Allow overriding csrfKey used by API/Auth containers.
    # It has to be base64 encoded random 256 bytes string.
    # If empty, it will be autogenerated.
    csrfKey: ~
  # Common labels & annotations shared across all deployed resources
  settings:
    ## Global dashboard settings
    global:
    #  # Cluster name that appears in the browser window title if it is set
    #  clusterName: ""
    #  # Max number of items that can be displayed on each list page
    #  itemsPerPage: 10
    #  # Number of seconds between every auto-refresh of logs
    #  logsAutoRefreshTimeInterval: 5
    #  # Number of seconds between every auto-refresh of every resource. Set 0 to disable
    #  resourceAutoRefreshTimeInterval: 5
    #  # Hide all access denied warnings in the notification panel
    #  disableAccessDeniedNotifications: false
    ## Pinned resources that will be displayed in dashboard's menu
    pinnedResources: []
    # - kind: customresourcedefinition
    #  #  Fully qualified name of a CRD
    #  name: prometheus.monitoring.coreos.com
    #  #  Display name
    #  displayName: Prometheus
    #  #  Is this CRD namespaced?
    #  namespaced: true

## Required Kong sub-chart with DBless configuration to act as a gateway
## for our all containers.
kong:
  enabled: true
  ## Configuration reference: https://docs.konghq.com/gateway/3.6.x/reference/configuration
  env:
    dns_order: LAST,A,CNAME,AAAA,SRV
    plugins: 'off'
    nginx_worker_processes: 1
  ingressController:
    enabled: false
  dblessConfig:
    configMap: kong-dbless-config
  proxy:
    type: ClusterIP
    http:
      enabled: false

rbac:
  main:
    enabled: true
    primary: true
    clusterWide: false
    rules:
      - apiGroups: 
        - ""
        resources: 
        - configmaps
        verbs:
        - get
        - update
  api:
    clusterWide: false
    rules:
      - apiGroups:
        - ""
        resources:
        - services/proxy
        verbs:
        - get
  metricsImage:
    clusterWide: false
    rules:
      - apiGroups:
        - "metrics.k8s.io"
        resources:
        - pods
        - nodes
        verbs:
        - get
        - list
        - watch

persistence:
  tmp-volume:
    enabled: true
    targetSelector:
      main:
        main:
          mountPath: "/tmp"
      auth:
        auth:
          mountPath: "/tmp"
      api:
        api:
          mountPath: "/tmp"
      metrics:
        metrics:
          mountPath: "/tmp"
portal:
  open:
    enabled: true

operator:
  register: true

manifestManager:
  enabled: false
