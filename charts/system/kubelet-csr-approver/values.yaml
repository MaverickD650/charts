image:
  repository: ghcr.io/postfinance/kubelet-csr-approver
  pullPolicy: IfNotPresent
  tag: 1.2.2@sha256:fdccaa3f2e4f59001b99357565bc5995393c53b21074da769fa53620b5138b85

service:
  main:
    ports:
      main:
        port: 8080
        targetPort: 8080
        protocol: http

workload:
  main:
    enabled: true
    spec:
      containers:
        main:
          args:
            - -metrics-bind-address
            - ":{{ .Values.metrics.port }}"
            - -health-probe-bind-address
            - ":8081"
            - -leader-election
            - -level
            - -0
          probes:
            liveness:
              path: "/healthz"
            readiness:
              path: "/healthz"
            startup:
              path: "/healthz"
         env:
            # PROVIDER_REGEX: {{ .Values.providerRegex }}
            ## optional, comma-separated, list of IP (IPv4, IPv6) subnets that are allowed to submit CSRs
            # PROVIDER_IP_PREFIXES: "{{ join "," .Values.providerIpPrefixes }}"

            ## optional, specified as a string (enclosed with ""). if left empty, defaults to 367 days
            # MAX_EXPIRATION_SECONDS: {{ .Values.maxExpirationSeconds | quote }}

            ## optional, permits to bypass dns resolution checks. default: false
            BYPASS_DNS_RESOLUTION: true
            ## optional, permits ignoring CSRs with another Username than `system:node:...`
            IGNORE_NON_SYSTEM_NODE: false
            ## number of DNS SAN names allowed in a certificate request. defaults to 1
            ALLOWED_DNS_NAMES: 1
            ## set this parameter to true to ignore mismatching DNS name and hostname
            BYPASS_HOSTNAME_CHECK: false


# logging level ranges from -5 (Fatal) to 10 (Verbose). default level is 0
loggingLevel: 0

leaderElection: true

rbac:
  main:
    enabled: true
    primary: true
    clusterWide: true
    rules:
      - apiGroups: ["coordination.k8s.io"]
        resources: ["leases"]
        verbs: ["create", "get", "update"]
      - apiGroups: [""]
        resources: ["events"]
        verbs: ["create"]
      - apiGroups: ["certificates.k8s.io"]
        resources: ["certificatesigningrequests"]
        verbs: ["get", "list", "watch"]
      - apiGroups: ["certificates.k8s.io"]
        resources: ["certificatesigningrequests/approval"]
        verbs: ["update"]
      - apiGroups: ["certificates.k8s.io"]
        resourceNames: ["kubernetes.io/kubelet-serving"]
        resources: ["signers"]
        verbs: ["approve"]

serviceAccount:
  main:
    enabled: true
    primary: true

metrics:
  main:
    # -- Enable and configure a Prometheus serviceMonitor for the chart under this key.
    # @default -- See values.yaml
    enabled: true
    type: "servicemonitor"
    endpoints:
      - port: main
        path: /metrics
    # -- Enable and configure Prometheus Rules for the chart under this key.
    # @default -- See values.yaml
    prometheusRule:
      enabled: false
      labels: {}
      # -- Configure additionial rules for the chart under this key.
      # @default -- See prometheusrules.yaml
      rules: []
      # - alert: UnifiPollerAbsent
      #   annotations:
      #     description: Unifi Poller has disappeared from Prometheus service discovery.
      #     summary: Unifi Poller is down.
      #   expr: |
      #     absent(up{job=~".*unifi-poller.*"} == 1)
      #   for: 5m
      #   labels:
      #     severity: critical

podOptions:
  automountServiceAccountToken: true

portal:
  open:
    enabled: false

operator:
  register: true

manifestManager:
  enabled: false
